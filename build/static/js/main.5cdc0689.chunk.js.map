{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["renderCell","date","list","getDate","time","title","getTodoList","displayList","filter","item","index","length","moreCount","moreItem","Whisper","placement","trigger","speaker","Popover","map","key","className","Badge","App","Nav","Item","icon","Icon","Calendar","bordered","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0UAmEA,SAASA,EAAWC,GAClB,IAAMC,EArCR,SAAqBD,GAGnB,OAFYE,YAAQF,IAGlB,KAAK,GACH,MAAO,CACL,CAAEG,KAAM,WAAYC,MAAO,WAC3B,CAAED,KAAM,WAAYC,MAAO,aAE/B,KAAK,EACH,MAAO,CACL,CAAED,KAAM,WAAYC,MAAO,cAC3B,CAAED,KAAM,WAAYC,MAAO,YAC3B,CAAED,KAAM,WAAYC,MAAO,eAC3B,CAAED,KAAM,WAAYC,MAAO,UAC3B,CAAED,KAAM,WAAYC,MAAO,WAE/B,KAAK,GACH,MAAO,CACL,CAAED,KAAM,WAAYC,MAAO,SAC3B,CAAED,KAAM,WAAYC,MAAO,QAC3B,CAAED,KAAM,WAAYC,MAAO,aAE/B,KAAK,GACH,MAAO,CACL,CAAED,KAAM,WAAYC,MAAO,WAC3B,CAAED,KAAM,WAAYC,MAAO,QAC3B,CAAED,KAAM,WAAYC,MAAO,SAC3B,CAAED,KAAM,WAAYC,MAAO,SAC3B,CAAED,KAAM,WAAYC,MAAO,WAE/B,QACE,MAAO,IAKEC,CAAYL,GACnBM,EAAcL,EAAKM,QAAO,SAACC,EAAMC,GAAP,OAAiBA,EAAQ,KAEzD,GAAIR,EAAKS,OAAQ,CACf,IAAMC,EAAYV,EAAKS,OAASJ,EAAYI,OACtCE,EACJ,4BACE,kBAACC,EAAA,EAAD,CACEC,UAAU,MACVC,QAAQ,QACRC,QACE,kBAACC,EAAA,EAAD,KACGhB,EAAKiB,KAAI,SAACV,EAAMC,GAAP,OACR,uBAAGU,IAAKV,GACN,2BAAID,EAAKL,MADX,MACwBK,EAAKJ,YAMnC,2BAAIO,EAAJ,WAKN,OACE,wBAAIS,UAAU,sBACXd,EAAYY,KAAI,SAACV,EAAMC,GAAP,OACf,wBAAIU,IAAKV,GACP,kBAACY,EAAA,EAAD,MADF,IACY,2BAAIb,EAAKL,MADrB,MACkCK,EAAKJ,UAGxCO,EAAYC,EAAW,MAK9B,OAAO,KAIMU,MAvGf,WACE,OACE,yBAAKF,UAAU,OACb,yBAAKA,UAAU,iBACb,4BAAQA,UAAU,cAChB,kBAACG,EAAA,EAAD,KACE,kBAACA,EAAA,EAAIC,KAAL,CAAUC,KAAM,kBAACC,EAAA,EAAD,CAAMD,KAAK,UAA3B,QACA,kBAACF,EAAA,EAAIC,KAAL,YACA,kBAACD,EAAA,EAAIC,KAAL,aACA,kBAACD,EAAA,EAAIC,KAAL,gBACA,kBAACD,EAAA,EAAIC,KAAL,gBAGJ,6BACE,kBAACG,EAAA,EAAD,CACEP,UAAU,qBACVQ,UAAQ,EACR7B,WAAYA,QCXJ8B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.5cdc0689.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport 'rsuite/dist/styles/rsuite-default.css';\nimport { Nav, Icon, Calendar, Whisper, Popover, Badge } from 'rsuite';\nimport { getDate } from 'date-fns'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className=\"App-container\">\n        <header className=\"App-header\">\n          <Nav>\n            <Nav.Item icon={<Icon icon=\"home\" />}>Home</Nav.Item>\n            <Nav.Item>All</Nav.Item>\n            <Nav.Item>Work</Nav.Item>\n            <Nav.Item>Day Off</Nav.Item>\n            <Nav.Item>Tasks</Nav.Item>\n          </Nav>\n        </header>\n        <div>\n          <Calendar\n            className=\"calendar-container\"\n            bordered\n            renderCell={renderCell}\n          />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nfunction getTodoList(date) {\n  const day = getDate(date);\n\n  switch (day) {\n    case 20:\n      return [\n        { time: '10:30 am', title: 'Meeting' },\n        { time: '12:00 pm', title: 'Almuerzo' }\n      ];\n    case 7:\n      return [\n        { time: '09:30 pm', title: 'Exercicios' },\n        { time: '12:30 pm', title: 'Almuerzo' },\n        { time: '05:00 pm', title: 'Nihongakkou' },\n        { time: '06:30 pm', title: 'Jantar' },\n        { time: '10:00 pm', title: 'Dormir' }\n      ];\n    case 11:\n      return [\n        { time: '09:30 pm', title: 'Beber' },\n        { time: '12:30 pm', title: 'Cair' },\n        { time: '05:00 pm', title: 'Levantar' },\n      ];\n    case 12:\n      return [\n        { time: '09:30 pm', title: 'Acordar' },\n        { time: '12:30 pm', title: 'Cafe' },\n        { time: '05:00 pm', title: 'Comer' },\n        { time: '06:30 pm', title: 'Beber' },\n        { time: '10:00 pm', title: 'Dormir' }\n      ];\n    default:\n      return [];\n  }\n}\n\nfunction renderCell(date) {\n  const list = getTodoList(date);\n  const displayList = list.filter((item, index) => index < 2);\n\n  if (list.length) {\n    const moreCount = list.length - displayList.length;\n    const moreItem = (\n      <li>\n        <Whisper\n          placement=\"top\"\n          trigger=\"click\"\n          speaker={\n            <Popover>\n              {list.map((item, index) => (\n                <p key={index}>\n                  <b>{item.time}</b> - {item.title}\n                </p>\n              ))}\n            </Popover>\n          }\n        >\n          <a>{moreCount} more</a>\n        </Whisper>\n      </li>\n    );\n\n    return (\n      <ul className=\"calendar-todo-list\">\n        {displayList.map((item, index) => (\n          <li key={index}>\n            <Badge /> <b>{item.time}</b> - {item.title}\n          </li>\n        ))}\n        {moreCount ? moreItem : null}\n      </ul>\n    );\n  }\n\n  return null;\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}